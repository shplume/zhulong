// Code generated by ent, DO NOT EDIT.

package administrators

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ZEQUANR/zhulong/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldID, id))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldAvatar, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldName, v))
}

// College applies equality check predicate on the "college" field. It's identical to CollegeEQ.
func College(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldCollege, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldPhone, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldNumber, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContainsFold(FieldAvatar, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContainsFold(FieldName, v))
}

// CollegeEQ applies the EQ predicate on the "college" field.
func CollegeEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldCollege, v))
}

// CollegeNEQ applies the NEQ predicate on the "college" field.
func CollegeNEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldCollege, v))
}

// CollegeIn applies the In predicate on the "college" field.
func CollegeIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldCollege, vs...))
}

// CollegeNotIn applies the NotIn predicate on the "college" field.
func CollegeNotIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldCollege, vs...))
}

// CollegeGT applies the GT predicate on the "college" field.
func CollegeGT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldCollege, v))
}

// CollegeGTE applies the GTE predicate on the "college" field.
func CollegeGTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldCollege, v))
}

// CollegeLT applies the LT predicate on the "college" field.
func CollegeLT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldCollege, v))
}

// CollegeLTE applies the LTE predicate on the "college" field.
func CollegeLTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldCollege, v))
}

// CollegeContains applies the Contains predicate on the "college" field.
func CollegeContains(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContains(FieldCollege, v))
}

// CollegeHasPrefix applies the HasPrefix predicate on the "college" field.
func CollegeHasPrefix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasPrefix(FieldCollege, v))
}

// CollegeHasSuffix applies the HasSuffix predicate on the "college" field.
func CollegeHasSuffix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasSuffix(FieldCollege, v))
}

// CollegeEqualFold applies the EqualFold predicate on the "college" field.
func CollegeEqualFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEqualFold(FieldCollege, v))
}

// CollegeContainsFold applies the ContainsFold predicate on the "college" field.
func CollegeContainsFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContainsFold(FieldCollege, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContainsFold(FieldPhone, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Administrators {
	return predicate.Administrators(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Administrators {
	return predicate.Administrators(sql.FieldContainsFold(FieldNumber, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Administrators {
	return predicate.Administrators(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Administrators {
	return predicate.Administrators(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Administrators) predicate.Administrators {
	return predicate.Administrators(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Administrators) predicate.Administrators {
	return predicate.Administrators(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Administrators) predicate.Administrators {
	return predicate.Administrators(sql.NotPredicates(p))
}

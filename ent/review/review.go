// Code generated by ent, DO NOT EDIT.

package review

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeThesis holds the string denoting the thesis edge name in mutations.
	EdgeThesis = "thesis"
	// EdgeStudentID holds the string denoting the student_id edge name in mutations.
	EdgeStudentID = "student_id"
	// EdgeTeacherID holds the string denoting the teacher_id edge name in mutations.
	EdgeTeacherID = "teacher_id"
	// EdgeBookID holds the string denoting the book_id edge name in mutations.
	EdgeBookID = "book_id"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// ThesisTable is the table that holds the thesis relation/edge.
	ThesisTable = "reviews"
	// ThesisInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	ThesisInverseTable = "files"
	// ThesisColumn is the table column denoting the thesis relation/edge.
	ThesisColumn = "review_thesis"
	// StudentIDTable is the table that holds the student_id relation/edge.
	StudentIDTable = "reviews"
	// StudentIDInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentIDInverseTable = "students"
	// StudentIDColumn is the table column denoting the student_id relation/edge.
	StudentIDColumn = "review_student_id"
	// TeacherIDTable is the table that holds the teacher_id relation/edge.
	TeacherIDTable = "reviews"
	// TeacherIDInverseTable is the table name for the Teacher entity.
	// It exists in this package in order to avoid circular dependency with the "teacher" package.
	TeacherIDInverseTable = "teachers"
	// TeacherIDColumn is the table column denoting the teacher_id relation/edge.
	TeacherIDColumn = "review_teacher_id"
	// BookIDTable is the table that holds the book_id relation/edge.
	BookIDTable = "reviews"
	// BookIDInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	BookIDInverseTable = "files"
	// BookIDColumn is the table column denoting the book_id relation/edge.
	BookIDColumn = "review_book_id"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldRemark,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reviews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"review_thesis",
	"review_student_id",
	"review_teacher_id",
	"review_book_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Review queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByThesisField orders the results by thesis field.
func ByThesisField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThesisStep(), sql.OrderByField(field, opts...))
	}
}

// ByStudentIDField orders the results by student_id field.
func ByStudentIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeacherIDField orders the results by teacher_id field.
func ByTeacherIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeacherIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByBookIDField orders the results by book_id field.
func ByBookIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookIDStep(), sql.OrderByField(field, opts...))
	}
}
func newThesisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThesisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ThesisTable, ThesisColumn),
	)
}
func newStudentIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StudentIDTable, StudentIDColumn),
	)
}
func newTeacherIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeacherIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TeacherIDTable, TeacherIDColumn),
	)
}
func newBookIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BookIDTable, BookIDColumn),
	)
}

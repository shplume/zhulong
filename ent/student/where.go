// Code generated by ent, DO NOT EDIT.

package student

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shplume/zhulong/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldName, v))
}

// College applies equality check predicate on the "college" field. It's identical to CollegeEQ.
func College(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCollege, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSubject, v))
}

// Class applies equality check predicate on the "class" field. It's identical to ClassEQ.
func Class(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldClass, v))
}

// Identity applies equality check predicate on the "identity" field. It's identical to IdentityEQ.
func Identity(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldIdentity, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldName, v))
}

// CollegeEQ applies the EQ predicate on the "college" field.
func CollegeEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCollege, v))
}

// CollegeNEQ applies the NEQ predicate on the "college" field.
func CollegeNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldCollege, v))
}

// CollegeIn applies the In predicate on the "college" field.
func CollegeIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldCollege, vs...))
}

// CollegeNotIn applies the NotIn predicate on the "college" field.
func CollegeNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldCollege, vs...))
}

// CollegeGT applies the GT predicate on the "college" field.
func CollegeGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldCollege, v))
}

// CollegeGTE applies the GTE predicate on the "college" field.
func CollegeGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldCollege, v))
}

// CollegeLT applies the LT predicate on the "college" field.
func CollegeLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldCollege, v))
}

// CollegeLTE applies the LTE predicate on the "college" field.
func CollegeLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldCollege, v))
}

// CollegeContains applies the Contains predicate on the "college" field.
func CollegeContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldCollege, v))
}

// CollegeHasPrefix applies the HasPrefix predicate on the "college" field.
func CollegeHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldCollege, v))
}

// CollegeHasSuffix applies the HasSuffix predicate on the "college" field.
func CollegeHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldCollege, v))
}

// CollegeEqualFold applies the EqualFold predicate on the "college" field.
func CollegeEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldCollege, v))
}

// CollegeContainsFold applies the ContainsFold predicate on the "college" field.
func CollegeContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldCollege, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldSubject, v))
}

// ClassEQ applies the EQ predicate on the "class" field.
func ClassEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldClass, v))
}

// ClassNEQ applies the NEQ predicate on the "class" field.
func ClassNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldClass, v))
}

// ClassIn applies the In predicate on the "class" field.
func ClassIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldClass, vs...))
}

// ClassNotIn applies the NotIn predicate on the "class" field.
func ClassNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldClass, vs...))
}

// ClassGT applies the GT predicate on the "class" field.
func ClassGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldClass, v))
}

// ClassGTE applies the GTE predicate on the "class" field.
func ClassGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldClass, v))
}

// ClassLT applies the LT predicate on the "class" field.
func ClassLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldClass, v))
}

// ClassLTE applies the LTE predicate on the "class" field.
func ClassLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldClass, v))
}

// ClassContains applies the Contains predicate on the "class" field.
func ClassContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldClass, v))
}

// ClassHasPrefix applies the HasPrefix predicate on the "class" field.
func ClassHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldClass, v))
}

// ClassHasSuffix applies the HasSuffix predicate on the "class" field.
func ClassHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldClass, v))
}

// ClassEqualFold applies the EqualFold predicate on the "class" field.
func ClassEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldClass, v))
}

// ClassContainsFold applies the ContainsFold predicate on the "class" field.
func ClassContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldClass, v))
}

// IdentityEQ applies the EQ predicate on the "identity" field.
func IdentityEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldIdentity, v))
}

// IdentityNEQ applies the NEQ predicate on the "identity" field.
func IdentityNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldIdentity, v))
}

// IdentityIn applies the In predicate on the "identity" field.
func IdentityIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldIdentity, vs...))
}

// IdentityNotIn applies the NotIn predicate on the "identity" field.
func IdentityNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldIdentity, vs...))
}

// IdentityGT applies the GT predicate on the "identity" field.
func IdentityGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldIdentity, v))
}

// IdentityGTE applies the GTE predicate on the "identity" field.
func IdentityGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldIdentity, v))
}

// IdentityLT applies the LT predicate on the "identity" field.
func IdentityLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldIdentity, v))
}

// IdentityLTE applies the LTE predicate on the "identity" field.
func IdentityLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldIdentity, v))
}

// IdentityContains applies the Contains predicate on the "identity" field.
func IdentityContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldIdentity, v))
}

// IdentityHasPrefix applies the HasPrefix predicate on the "identity" field.
func IdentityHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldIdentity, v))
}

// IdentityHasSuffix applies the HasSuffix predicate on the "identity" field.
func IdentityHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldIdentity, v))
}

// IdentityEqualFold applies the EqualFold predicate on the "identity" field.
func IdentityEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldIdentity, v))
}

// IdentityContainsFold applies the ContainsFold predicate on the "identity" field.
func IdentityContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldIdentity, v))
}

// HasUserID applies the HasEdge predicate on the "user_id" edge.
func HasUserID() predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserIDTable, UserIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDWith applies the HasEdge predicate on the "user_id" edge with a given conditions (other predicates).
func HasUserIDWith(preds ...predicate.User) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := newUserIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Student) predicate.Student {
	return predicate.Student(sql.NotPredicates(p))
}

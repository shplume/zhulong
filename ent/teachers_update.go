// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ZEQUANR/zhulong/ent/predicate"
	"github.com/ZEQUANR/zhulong/ent/teachers"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// TeachersUpdate is the builder for updating Teachers entities.
type TeachersUpdate struct {
	config
	hooks    []Hook
	mutation *TeachersMutation
}

// Where appends a list predicates to the TeachersUpdate builder.
func (tu *TeachersUpdate) Where(ps ...predicate.Teachers) *TeachersUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAvatar sets the "avatar" field.
func (tu *TeachersUpdate) SetAvatar(s string) *TeachersUpdate {
	tu.mutation.SetAvatar(s)
	return tu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (tu *TeachersUpdate) SetNillableAvatar(s *string) *TeachersUpdate {
	if s != nil {
		tu.SetAvatar(*s)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TeachersUpdate) SetName(s string) *TeachersUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TeachersUpdate) SetNillableName(s *string) *TeachersUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetCollege sets the "college" field.
func (tu *TeachersUpdate) SetCollege(s string) *TeachersUpdate {
	tu.mutation.SetCollege(s)
	return tu
}

// SetNillableCollege sets the "college" field if the given value is not nil.
func (tu *TeachersUpdate) SetNillableCollege(s *string) *TeachersUpdate {
	if s != nil {
		tu.SetCollege(*s)
	}
	return tu
}

// SetPhone sets the "phone" field.
func (tu *TeachersUpdate) SetPhone(s string) *TeachersUpdate {
	tu.mutation.SetPhone(s)
	return tu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tu *TeachersUpdate) SetNillablePhone(s *string) *TeachersUpdate {
	if s != nil {
		tu.SetPhone(*s)
	}
	return tu
}

// SetNumber sets the "number" field.
func (tu *TeachersUpdate) SetNumber(s string) *TeachersUpdate {
	tu.mutation.SetNumber(s)
	return tu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (tu *TeachersUpdate) SetNillableNumber(s *string) *TeachersUpdate {
	if s != nil {
		tu.SetNumber(*s)
	}
	return tu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (tu *TeachersUpdate) SetUsersID(id int) *TeachersUpdate {
	tu.mutation.SetUsersID(id)
	return tu
}

// SetUsers sets the "users" edge to the User entity.
func (tu *TeachersUpdate) SetUsers(u *User) *TeachersUpdate {
	return tu.SetUsersID(u.ID)
}

// Mutation returns the TeachersMutation object of the builder.
func (tu *TeachersUpdate) Mutation() *TeachersMutation {
	return tu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (tu *TeachersUpdate) ClearUsers() *TeachersUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeachersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeachersUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeachersUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeachersUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeachersUpdate) check() error {
	if _, ok := tu.mutation.UsersID(); tu.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Teachers.users"`)
	}
	return nil
}

func (tu *TeachersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(teachers.Table, teachers.Columns, sqlgraph.NewFieldSpec(teachers.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Avatar(); ok {
		_spec.SetField(teachers.FieldAvatar, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(teachers.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.College(); ok {
		_spec.SetField(teachers.FieldCollege, field.TypeString, value)
	}
	if value, ok := tu.mutation.Phone(); ok {
		_spec.SetField(teachers.FieldPhone, field.TypeString, value)
	}
	if value, ok := tu.mutation.Number(); ok {
		_spec.SetField(teachers.FieldNumber, field.TypeString, value)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   teachers.UsersTable,
			Columns: []string{teachers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   teachers.UsersTable,
			Columns: []string{teachers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teachers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeachersUpdateOne is the builder for updating a single Teachers entity.
type TeachersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeachersMutation
}

// SetAvatar sets the "avatar" field.
func (tuo *TeachersUpdateOne) SetAvatar(s string) *TeachersUpdateOne {
	tuo.mutation.SetAvatar(s)
	return tuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (tuo *TeachersUpdateOne) SetNillableAvatar(s *string) *TeachersUpdateOne {
	if s != nil {
		tuo.SetAvatar(*s)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TeachersUpdateOne) SetName(s string) *TeachersUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TeachersUpdateOne) SetNillableName(s *string) *TeachersUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetCollege sets the "college" field.
func (tuo *TeachersUpdateOne) SetCollege(s string) *TeachersUpdateOne {
	tuo.mutation.SetCollege(s)
	return tuo
}

// SetNillableCollege sets the "college" field if the given value is not nil.
func (tuo *TeachersUpdateOne) SetNillableCollege(s *string) *TeachersUpdateOne {
	if s != nil {
		tuo.SetCollege(*s)
	}
	return tuo
}

// SetPhone sets the "phone" field.
func (tuo *TeachersUpdateOne) SetPhone(s string) *TeachersUpdateOne {
	tuo.mutation.SetPhone(s)
	return tuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tuo *TeachersUpdateOne) SetNillablePhone(s *string) *TeachersUpdateOne {
	if s != nil {
		tuo.SetPhone(*s)
	}
	return tuo
}

// SetNumber sets the "number" field.
func (tuo *TeachersUpdateOne) SetNumber(s string) *TeachersUpdateOne {
	tuo.mutation.SetNumber(s)
	return tuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (tuo *TeachersUpdateOne) SetNillableNumber(s *string) *TeachersUpdateOne {
	if s != nil {
		tuo.SetNumber(*s)
	}
	return tuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (tuo *TeachersUpdateOne) SetUsersID(id int) *TeachersUpdateOne {
	tuo.mutation.SetUsersID(id)
	return tuo
}

// SetUsers sets the "users" edge to the User entity.
func (tuo *TeachersUpdateOne) SetUsers(u *User) *TeachersUpdateOne {
	return tuo.SetUsersID(u.ID)
}

// Mutation returns the TeachersMutation object of the builder.
func (tuo *TeachersUpdateOne) Mutation() *TeachersMutation {
	return tuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (tuo *TeachersUpdateOne) ClearUsers() *TeachersUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// Where appends a list predicates to the TeachersUpdate builder.
func (tuo *TeachersUpdateOne) Where(ps ...predicate.Teachers) *TeachersUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeachersUpdateOne) Select(field string, fields ...string) *TeachersUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Teachers entity.
func (tuo *TeachersUpdateOne) Save(ctx context.Context) (*Teachers, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeachersUpdateOne) SaveX(ctx context.Context) *Teachers {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeachersUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeachersUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeachersUpdateOne) check() error {
	if _, ok := tuo.mutation.UsersID(); tuo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Teachers.users"`)
	}
	return nil
}

func (tuo *TeachersUpdateOne) sqlSave(ctx context.Context) (_node *Teachers, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teachers.Table, teachers.Columns, sqlgraph.NewFieldSpec(teachers.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Teachers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teachers.FieldID)
		for _, f := range fields {
			if !teachers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teachers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Avatar(); ok {
		_spec.SetField(teachers.FieldAvatar, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(teachers.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.College(); ok {
		_spec.SetField(teachers.FieldCollege, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Phone(); ok {
		_spec.SetField(teachers.FieldPhone, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Number(); ok {
		_spec.SetField(teachers.FieldNumber, field.TypeString, value)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   teachers.UsersTable,
			Columns: []string{teachers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   teachers.UsersTable,
			Columns: []string{teachers.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Teachers{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teachers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

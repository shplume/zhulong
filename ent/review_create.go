// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shplume/zhulong/ent/file"
	"github.com/shplume/zhulong/ent/review"
	"github.com/shplume/zhulong/ent/student"
	"github.com/shplume/zhulong/ent/teacher"
)

// ReviewCreate is the builder for creating a Review entity.
type ReviewCreate struct {
	config
	mutation *ReviewMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (rc *ReviewCreate) SetStatus(i int) *ReviewCreate {
	rc.mutation.SetStatus(i)
	return rc
}

// SetRemark sets the "remark" field.
func (rc *ReviewCreate) SetRemark(s string) *ReviewCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetID sets the "id" field.
func (rc *ReviewCreate) SetID(i int) *ReviewCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetThesisID sets the "thesis" edge to the File entity by ID.
func (rc *ReviewCreate) SetThesisID(id int) *ReviewCreate {
	rc.mutation.SetThesisID(id)
	return rc
}

// SetThesis sets the "thesis" edge to the File entity.
func (rc *ReviewCreate) SetThesis(f *File) *ReviewCreate {
	return rc.SetThesisID(f.ID)
}

// SetStudentIDID sets the "student_id" edge to the Student entity by ID.
func (rc *ReviewCreate) SetStudentIDID(id int) *ReviewCreate {
	rc.mutation.SetStudentIDID(id)
	return rc
}

// SetStudentID sets the "student_id" edge to the Student entity.
func (rc *ReviewCreate) SetStudentID(s *Student) *ReviewCreate {
	return rc.SetStudentIDID(s.ID)
}

// SetTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID.
func (rc *ReviewCreate) SetTeacherIDID(id int) *ReviewCreate {
	rc.mutation.SetTeacherIDID(id)
	return rc
}

// SetNillableTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID if the given value is not nil.
func (rc *ReviewCreate) SetNillableTeacherIDID(id *int) *ReviewCreate {
	if id != nil {
		rc = rc.SetTeacherIDID(*id)
	}
	return rc
}

// SetTeacherID sets the "teacher_id" edge to the Teacher entity.
func (rc *ReviewCreate) SetTeacherID(t *Teacher) *ReviewCreate {
	return rc.SetTeacherIDID(t.ID)
}

// SetBookIDID sets the "book_id" edge to the File entity by ID.
func (rc *ReviewCreate) SetBookIDID(id int) *ReviewCreate {
	rc.mutation.SetBookIDID(id)
	return rc
}

// SetNillableBookIDID sets the "book_id" edge to the File entity by ID if the given value is not nil.
func (rc *ReviewCreate) SetNillableBookIDID(id *int) *ReviewCreate {
	if id != nil {
		rc = rc.SetBookIDID(*id)
	}
	return rc
}

// SetBookID sets the "book_id" edge to the File entity.
func (rc *ReviewCreate) SetBookID(f *File) *ReviewCreate {
	return rc.SetBookIDID(f.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (rc *ReviewCreate) Mutation() *ReviewMutation {
	return rc.mutation
}

// Save creates the Review in the database.
func (rc *ReviewCreate) Save(ctx context.Context) (*Review, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReviewCreate) SaveX(ctx context.Context) *Review {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReviewCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReviewCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReviewCreate) check() error {
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Review.status"`)}
	}
	if _, ok := rc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Review.remark"`)}
	}
	if _, ok := rc.mutation.ThesisID(); !ok {
		return &ValidationError{Name: "thesis", err: errors.New(`ent: missing required edge "Review.thesis"`)}
	}
	if _, ok := rc.mutation.StudentIDID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required edge "Review.student_id"`)}
	}
	return nil
}

func (rc *ReviewCreate) sqlSave(ctx context.Context) (*Review, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReviewCreate) createSpec() (*Review, *sqlgraph.CreateSpec) {
	var (
		_node = &Review{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(review.Table, sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(review.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.SetField(review.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if nodes := rc.mutation.ThesisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.ThesisTable,
			Columns: []string{review.ThesisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.review_thesis = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StudentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.StudentIDTable,
			Columns: []string{review.StudentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.review_student_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TeacherIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.TeacherIDTable,
			Columns: []string{review.TeacherIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.review_teacher_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BookIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.BookIDTable,
			Columns: []string{review.BookIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.review_book_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReviewCreateBulk is the builder for creating many Review entities in bulk.
type ReviewCreateBulk struct {
	config
	err      error
	builders []*ReviewCreate
}

// Save creates the Review entities in the database.
func (rcb *ReviewCreateBulk) Save(ctx context.Context) ([]*Review, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Review, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReviewCreateBulk) SaveX(ctx context.Context) []*Review {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReviewCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shplume/zhulong/ent/file"
	"github.com/shplume/zhulong/ent/predicate"
	"github.com/shplume/zhulong/ent/review"
	"github.com/shplume/zhulong/ent/student"
	"github.com/shplume/zhulong/ent/teacher"
)

// ReviewUpdate is the builder for updating Review entities.
type ReviewUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewMutation
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ru *ReviewUpdate) Where(ps ...predicate.Review) *ReviewUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReviewUpdate) SetStatus(i int) *ReviewUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(i)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableStatus(i *int) *ReviewUpdate {
	if i != nil {
		ru.SetStatus(*i)
	}
	return ru
}

// AddStatus adds i to the "status" field.
func (ru *ReviewUpdate) AddStatus(i int) *ReviewUpdate {
	ru.mutation.AddStatus(i)
	return ru
}

// SetRemark sets the "remark" field.
func (ru *ReviewUpdate) SetRemark(s string) *ReviewUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableRemark(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// SetThesisID sets the "thesis" edge to the File entity by ID.
func (ru *ReviewUpdate) SetThesisID(id int) *ReviewUpdate {
	ru.mutation.SetThesisID(id)
	return ru
}

// SetThesis sets the "thesis" edge to the File entity.
func (ru *ReviewUpdate) SetThesis(f *File) *ReviewUpdate {
	return ru.SetThesisID(f.ID)
}

// SetStudentIDID sets the "student_id" edge to the Student entity by ID.
func (ru *ReviewUpdate) SetStudentIDID(id int) *ReviewUpdate {
	ru.mutation.SetStudentIDID(id)
	return ru
}

// SetStudentID sets the "student_id" edge to the Student entity.
func (ru *ReviewUpdate) SetStudentID(s *Student) *ReviewUpdate {
	return ru.SetStudentIDID(s.ID)
}

// SetTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID.
func (ru *ReviewUpdate) SetTeacherIDID(id int) *ReviewUpdate {
	ru.mutation.SetTeacherIDID(id)
	return ru
}

// SetNillableTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID if the given value is not nil.
func (ru *ReviewUpdate) SetNillableTeacherIDID(id *int) *ReviewUpdate {
	if id != nil {
		ru = ru.SetTeacherIDID(*id)
	}
	return ru
}

// SetTeacherID sets the "teacher_id" edge to the Teacher entity.
func (ru *ReviewUpdate) SetTeacherID(t *Teacher) *ReviewUpdate {
	return ru.SetTeacherIDID(t.ID)
}

// SetBookIDID sets the "book_id" edge to the File entity by ID.
func (ru *ReviewUpdate) SetBookIDID(id int) *ReviewUpdate {
	ru.mutation.SetBookIDID(id)
	return ru
}

// SetNillableBookIDID sets the "book_id" edge to the File entity by ID if the given value is not nil.
func (ru *ReviewUpdate) SetNillableBookIDID(id *int) *ReviewUpdate {
	if id != nil {
		ru = ru.SetBookIDID(*id)
	}
	return ru
}

// SetBookID sets the "book_id" edge to the File entity.
func (ru *ReviewUpdate) SetBookID(f *File) *ReviewUpdate {
	return ru.SetBookIDID(f.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ru *ReviewUpdate) Mutation() *ReviewMutation {
	return ru.mutation
}

// ClearThesis clears the "thesis" edge to the File entity.
func (ru *ReviewUpdate) ClearThesis() *ReviewUpdate {
	ru.mutation.ClearThesis()
	return ru
}

// ClearStudentID clears the "student_id" edge to the Student entity.
func (ru *ReviewUpdate) ClearStudentID() *ReviewUpdate {
	ru.mutation.ClearStudentID()
	return ru
}

// ClearTeacherID clears the "teacher_id" edge to the Teacher entity.
func (ru *ReviewUpdate) ClearTeacherID() *ReviewUpdate {
	ru.mutation.ClearTeacherID()
	return ru
}

// ClearBookID clears the "book_id" edge to the File entity.
func (ru *ReviewUpdate) ClearBookID() *ReviewUpdate {
	ru.mutation.ClearBookID()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReviewUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReviewUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReviewUpdate) check() error {
	if _, ok := ru.mutation.ThesisID(); ru.mutation.ThesisCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Review.thesis"`)
	}
	if _, ok := ru.mutation.StudentIDID(); ru.mutation.StudentIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Review.student_id"`)
	}
	return nil
}

func (ru *ReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(review.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(review.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(review.FieldRemark, field.TypeString, value)
	}
	if ru.mutation.ThesisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.ThesisTable,
			Columns: []string{review.ThesisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ThesisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.ThesisTable,
			Columns: []string{review.ThesisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StudentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.StudentIDTable,
			Columns: []string{review.StudentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StudentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.StudentIDTable,
			Columns: []string{review.StudentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TeacherIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.TeacherIDTable,
			Columns: []string{review.TeacherIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TeacherIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.TeacherIDTable,
			Columns: []string{review.TeacherIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BookIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.BookIDTable,
			Columns: []string{review.BookIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BookIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.BookIDTable,
			Columns: []string{review.BookIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReviewUpdateOne is the builder for updating a single Review entity.
type ReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewMutation
}

// SetStatus sets the "status" field.
func (ruo *ReviewUpdateOne) SetStatus(i int) *ReviewUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(i)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableStatus(i *int) *ReviewUpdateOne {
	if i != nil {
		ruo.SetStatus(*i)
	}
	return ruo
}

// AddStatus adds i to the "status" field.
func (ruo *ReviewUpdateOne) AddStatus(i int) *ReviewUpdateOne {
	ruo.mutation.AddStatus(i)
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *ReviewUpdateOne) SetRemark(s string) *ReviewUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableRemark(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// SetThesisID sets the "thesis" edge to the File entity by ID.
func (ruo *ReviewUpdateOne) SetThesisID(id int) *ReviewUpdateOne {
	ruo.mutation.SetThesisID(id)
	return ruo
}

// SetThesis sets the "thesis" edge to the File entity.
func (ruo *ReviewUpdateOne) SetThesis(f *File) *ReviewUpdateOne {
	return ruo.SetThesisID(f.ID)
}

// SetStudentIDID sets the "student_id" edge to the Student entity by ID.
func (ruo *ReviewUpdateOne) SetStudentIDID(id int) *ReviewUpdateOne {
	ruo.mutation.SetStudentIDID(id)
	return ruo
}

// SetStudentID sets the "student_id" edge to the Student entity.
func (ruo *ReviewUpdateOne) SetStudentID(s *Student) *ReviewUpdateOne {
	return ruo.SetStudentIDID(s.ID)
}

// SetTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID.
func (ruo *ReviewUpdateOne) SetTeacherIDID(id int) *ReviewUpdateOne {
	ruo.mutation.SetTeacherIDID(id)
	return ruo
}

// SetNillableTeacherIDID sets the "teacher_id" edge to the Teacher entity by ID if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableTeacherIDID(id *int) *ReviewUpdateOne {
	if id != nil {
		ruo = ruo.SetTeacherIDID(*id)
	}
	return ruo
}

// SetTeacherID sets the "teacher_id" edge to the Teacher entity.
func (ruo *ReviewUpdateOne) SetTeacherID(t *Teacher) *ReviewUpdateOne {
	return ruo.SetTeacherIDID(t.ID)
}

// SetBookIDID sets the "book_id" edge to the File entity by ID.
func (ruo *ReviewUpdateOne) SetBookIDID(id int) *ReviewUpdateOne {
	ruo.mutation.SetBookIDID(id)
	return ruo
}

// SetNillableBookIDID sets the "book_id" edge to the File entity by ID if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableBookIDID(id *int) *ReviewUpdateOne {
	if id != nil {
		ruo = ruo.SetBookIDID(*id)
	}
	return ruo
}

// SetBookID sets the "book_id" edge to the File entity.
func (ruo *ReviewUpdateOne) SetBookID(f *File) *ReviewUpdateOne {
	return ruo.SetBookIDID(f.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ruo *ReviewUpdateOne) Mutation() *ReviewMutation {
	return ruo.mutation
}

// ClearThesis clears the "thesis" edge to the File entity.
func (ruo *ReviewUpdateOne) ClearThesis() *ReviewUpdateOne {
	ruo.mutation.ClearThesis()
	return ruo
}

// ClearStudentID clears the "student_id" edge to the Student entity.
func (ruo *ReviewUpdateOne) ClearStudentID() *ReviewUpdateOne {
	ruo.mutation.ClearStudentID()
	return ruo
}

// ClearTeacherID clears the "teacher_id" edge to the Teacher entity.
func (ruo *ReviewUpdateOne) ClearTeacherID() *ReviewUpdateOne {
	ruo.mutation.ClearTeacherID()
	return ruo
}

// ClearBookID clears the "book_id" edge to the File entity.
func (ruo *ReviewUpdateOne) ClearBookID() *ReviewUpdateOne {
	ruo.mutation.ClearBookID()
	return ruo
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ruo *ReviewUpdateOne) Where(ps ...predicate.Review) *ReviewUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReviewUpdateOne) Select(field string, fields ...string) *ReviewUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Review entity.
func (ruo *ReviewUpdateOne) Save(ctx context.Context) (*Review, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReviewUpdateOne) SaveX(ctx context.Context) *Review {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReviewUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReviewUpdateOne) check() error {
	if _, ok := ruo.mutation.ThesisID(); ruo.mutation.ThesisCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Review.thesis"`)
	}
	if _, ok := ruo.mutation.StudentIDID(); ruo.mutation.StudentIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Review.student_id"`)
	}
	return nil
}

func (ruo *ReviewUpdateOne) sqlSave(ctx context.Context) (_node *Review, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Review.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, review.FieldID)
		for _, f := range fields {
			if !review.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != review.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(review.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(review.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(review.FieldRemark, field.TypeString, value)
	}
	if ruo.mutation.ThesisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.ThesisTable,
			Columns: []string{review.ThesisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ThesisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.ThesisTable,
			Columns: []string{review.ThesisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StudentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.StudentIDTable,
			Columns: []string{review.StudentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StudentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.StudentIDTable,
			Columns: []string{review.StudentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TeacherIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.TeacherIDTable,
			Columns: []string{review.TeacherIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TeacherIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.TeacherIDTable,
			Columns: []string{review.TeacherIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BookIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.BookIDTable,
			Columns: []string{review.BookIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BookIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   review.BookIDTable,
			Columns: []string{review.BookIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Review{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package thesis

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the thesis type in the database.
	Label = "thesis"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldFileState holds the string denoting the file_state field in the database.
	FieldFileState = "file_state"
	// FieldUploadTime holds the string denoting the upload_time field in the database.
	FieldUploadTime = "upload_time"
	// FieldChineseTitle holds the string denoting the chinese_title field in the database.
	FieldChineseTitle = "chinese_title"
	// FieldEnglishTitle holds the string denoting the english_title field in the database.
	FieldEnglishTitle = "english_title"
	// FieldAuthors holds the string denoting the authors field in the database.
	FieldAuthors = "authors"
	// FieldTeachers holds the string denoting the teachers field in the database.
	FieldTeachers = "teachers"
	// FieldFirstAdvance holds the string denoting the first_advance field in the database.
	FieldFirstAdvance = "first_advance"
	// FieldSecondAdvance holds the string denoting the second_advance field in the database.
	FieldSecondAdvance = "second_advance"
	// FieldThirdAdvance holds the string denoting the third_advance field in the database.
	FieldThirdAdvance = "third_advance"
	// FieldDrawback holds the string denoting the drawback field in the database.
	FieldDrawback = "drawback"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeUploaders holds the string denoting the uploaders edge name in mutations.
	EdgeUploaders = "uploaders"
	// EdgeExamine holds the string denoting the examine edge name in mutations.
	EdgeExamine = "examine"
	// Table holds the table name of the thesis in the database.
	Table = "theses"
	// UploadersTable is the table that holds the uploaders relation/edge.
	UploadersTable = "theses"
	// UploadersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UploadersInverseTable = "users"
	// UploadersColumn is the table column denoting the uploaders relation/edge.
	UploadersColumn = "user_thesis"
	// ExamineTable is the table that holds the examine relation/edge.
	ExamineTable = "theses"
	// ExamineInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ExamineInverseTable = "users"
	// ExamineColumn is the table column denoting the examine relation/edge.
	ExamineColumn = "thesis_examine"
)

// Columns holds all SQL columns for thesis fields.
var Columns = []string{
	FieldID,
	FieldFileName,
	FieldFileURL,
	FieldFileState,
	FieldUploadTime,
	FieldChineseTitle,
	FieldEnglishTitle,
	FieldAuthors,
	FieldTeachers,
	FieldFirstAdvance,
	FieldSecondAdvance,
	FieldThirdAdvance,
	FieldDrawback,
	FieldCreateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "theses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"thesis_examine",
	"user_thesis",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the Thesis queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByFileState orders the results by the file_state field.
func ByFileState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileState, opts...).ToFunc()
}

// ByUploadTime orders the results by the upload_time field.
func ByUploadTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadTime, opts...).ToFunc()
}

// ByChineseTitle orders the results by the chinese_title field.
func ByChineseTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChineseTitle, opts...).ToFunc()
}

// ByEnglishTitle orders the results by the english_title field.
func ByEnglishTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnglishTitle, opts...).ToFunc()
}

// ByAuthors orders the results by the authors field.
func ByAuthors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthors, opts...).ToFunc()
}

// ByTeachers orders the results by the teachers field.
func ByTeachers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeachers, opts...).ToFunc()
}

// ByFirstAdvance orders the results by the first_advance field.
func ByFirstAdvance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstAdvance, opts...).ToFunc()
}

// BySecondAdvance orders the results by the second_advance field.
func BySecondAdvance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondAdvance, opts...).ToFunc()
}

// ByThirdAdvance orders the results by the third_advance field.
func ByThirdAdvance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThirdAdvance, opts...).ToFunc()
}

// ByDrawback orders the results by the drawback field.
func ByDrawback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrawback, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUploadersField orders the results by uploaders field.
func ByUploadersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadersStep(), sql.OrderByField(field, opts...))
	}
}

// ByExamineField orders the results by examine field.
func ByExamineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamineStep(), sql.OrderByField(field, opts...))
	}
}
func newUploadersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploadersTable, UploadersColumn),
	)
}
func newExamineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ExamineTable, ExamineColumn),
	)
}

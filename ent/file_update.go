// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shplume/zhulong/ent/file"
	"github.com/shplume/zhulong/ent/predicate"
	"github.com/shplume/zhulong/ent/user"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableName(s *string) *FileUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(i int) *FileUpdate {
	fu.mutation.ResetType()
	fu.mutation.SetType(i)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableType(i *int) *FileUpdate {
	if i != nil {
		fu.SetType(*i)
	}
	return fu
}

// AddType adds i to the "type" field.
func (fu *FileUpdate) AddType(i int) *FileUpdate {
	fu.mutation.AddType(i)
	return fu
}

// SetURL sets the "url" field.
func (fu *FileUpdate) SetURL(s string) *FileUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fu *FileUpdate) SetNillableURL(s *string) *FileUpdate {
	if s != nil {
		fu.SetURL(*s)
	}
	return fu
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (fu *FileUpdate) SetUserIDID(id int) *FileUpdate {
	fu.mutation.SetUserIDID(id)
	return fu
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableUserIDID(id *int) *FileUpdate {
	if id != nil {
		fu = fu.SetUserIDID(*id)
	}
	return fu
}

// SetUserID sets the "user_id" edge to the User entity.
func (fu *FileUpdate) SetUserID(u *User) *FileUpdate {
	return fu.SetUserIDID(u.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (fu *FileUpdate) ClearUserID() *FileUpdate {
	fu.mutation.ClearUserID()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedType(); ok {
		_spec.AddField(file.FieldType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.SetField(file.FieldURL, field.TypeString, value)
	}
	if fu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   file.UserIDTable,
			Columns: []string{file.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   file.UserIDTable,
			Columns: []string{file.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(i int) *FileUpdateOne {
	fuo.mutation.ResetType()
	fuo.mutation.SetType(i)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableType(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetType(*i)
	}
	return fuo
}

// AddType adds i to the "type" field.
func (fuo *FileUpdateOne) AddType(i int) *FileUpdateOne {
	fuo.mutation.AddType(i)
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FileUpdateOne) SetURL(s string) *FileUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableURL(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetURL(*s)
	}
	return fuo
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (fuo *FileUpdateOne) SetUserIDID(id int) *FileUpdateOne {
	fuo.mutation.SetUserIDID(id)
	return fuo
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUserIDID(id *int) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetUserIDID(*id)
	}
	return fuo
}

// SetUserID sets the "user_id" edge to the User entity.
func (fuo *FileUpdateOne) SetUserID(u *User) *FileUpdateOne {
	return fuo.SetUserIDID(u.ID)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (fuo *FileUpdateOne) ClearUserID() *FileUpdateOne {
	fuo.mutation.ClearUserID()
	return fuo
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedType(); ok {
		_spec.AddField(file.FieldType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.SetField(file.FieldURL, field.TypeString, value)
	}
	if fuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   file.UserIDTable,
			Columns: []string{file.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   file.UserIDTable,
			Columns: []string{file.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}

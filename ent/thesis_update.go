// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ZEQUANR/zhulong/ent/predicate"
	"github.com/ZEQUANR/zhulong/ent/thesis"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// ThesisUpdate is the builder for updating Thesis entities.
type ThesisUpdate struct {
	config
	hooks    []Hook
	mutation *ThesisMutation
}

// Where appends a list predicates to the ThesisUpdate builder.
func (tu *ThesisUpdate) Where(ps ...predicate.Thesis) *ThesisUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFileName sets the "file_name" field.
func (tu *ThesisUpdate) SetFileName(s string) *ThesisUpdate {
	tu.mutation.SetFileName(s)
	return tu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableFileName(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetFileName(*s)
	}
	return tu
}

// ClearFileName clears the value of the "file_name" field.
func (tu *ThesisUpdate) ClearFileName() *ThesisUpdate {
	tu.mutation.ClearFileName()
	return tu
}

// SetFileURL sets the "file_url" field.
func (tu *ThesisUpdate) SetFileURL(s string) *ThesisUpdate {
	tu.mutation.SetFileURL(s)
	return tu
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableFileURL(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetFileURL(*s)
	}
	return tu
}

// ClearFileURL clears the value of the "file_url" field.
func (tu *ThesisUpdate) ClearFileURL() *ThesisUpdate {
	tu.mutation.ClearFileURL()
	return tu
}

// SetFileState sets the "file_state" field.
func (tu *ThesisUpdate) SetFileState(i int) *ThesisUpdate {
	tu.mutation.ResetFileState()
	tu.mutation.SetFileState(i)
	return tu
}

// SetNillableFileState sets the "file_state" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableFileState(i *int) *ThesisUpdate {
	if i != nil {
		tu.SetFileState(*i)
	}
	return tu
}

// AddFileState adds i to the "file_state" field.
func (tu *ThesisUpdate) AddFileState(i int) *ThesisUpdate {
	tu.mutation.AddFileState(i)
	return tu
}

// SetUploadTime sets the "upload_time" field.
func (tu *ThesisUpdate) SetUploadTime(t time.Time) *ThesisUpdate {
	tu.mutation.SetUploadTime(t)
	return tu
}

// SetNillableUploadTime sets the "upload_time" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableUploadTime(t *time.Time) *ThesisUpdate {
	if t != nil {
		tu.SetUploadTime(*t)
	}
	return tu
}

// ClearUploadTime clears the value of the "upload_time" field.
func (tu *ThesisUpdate) ClearUploadTime() *ThesisUpdate {
	tu.mutation.ClearUploadTime()
	return tu
}

// SetChineseTitle sets the "chinese_title" field.
func (tu *ThesisUpdate) SetChineseTitle(s string) *ThesisUpdate {
	tu.mutation.SetChineseTitle(s)
	return tu
}

// SetNillableChineseTitle sets the "chinese_title" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableChineseTitle(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetChineseTitle(*s)
	}
	return tu
}

// SetEnglishTitle sets the "english_title" field.
func (tu *ThesisUpdate) SetEnglishTitle(s string) *ThesisUpdate {
	tu.mutation.SetEnglishTitle(s)
	return tu
}

// SetNillableEnglishTitle sets the "english_title" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableEnglishTitle(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetEnglishTitle(*s)
	}
	return tu
}

// SetAuthors sets the "authors" field.
func (tu *ThesisUpdate) SetAuthors(s string) *ThesisUpdate {
	tu.mutation.SetAuthors(s)
	return tu
}

// SetNillableAuthors sets the "authors" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableAuthors(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetAuthors(*s)
	}
	return tu
}

// SetTeachers sets the "teachers" field.
func (tu *ThesisUpdate) SetTeachers(s string) *ThesisUpdate {
	tu.mutation.SetTeachers(s)
	return tu
}

// SetNillableTeachers sets the "teachers" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableTeachers(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetTeachers(*s)
	}
	return tu
}

// SetFirstAdvance sets the "first_advance" field.
func (tu *ThesisUpdate) SetFirstAdvance(s string) *ThesisUpdate {
	tu.mutation.SetFirstAdvance(s)
	return tu
}

// SetNillableFirstAdvance sets the "first_advance" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableFirstAdvance(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetFirstAdvance(*s)
	}
	return tu
}

// SetSecondAdvance sets the "second_advance" field.
func (tu *ThesisUpdate) SetSecondAdvance(s string) *ThesisUpdate {
	tu.mutation.SetSecondAdvance(s)
	return tu
}

// SetNillableSecondAdvance sets the "second_advance" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableSecondAdvance(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetSecondAdvance(*s)
	}
	return tu
}

// SetThirdAdvance sets the "third_advance" field.
func (tu *ThesisUpdate) SetThirdAdvance(s string) *ThesisUpdate {
	tu.mutation.SetThirdAdvance(s)
	return tu
}

// SetNillableThirdAdvance sets the "third_advance" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableThirdAdvance(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetThirdAdvance(*s)
	}
	return tu
}

// SetDrawback sets the "drawback" field.
func (tu *ThesisUpdate) SetDrawback(s string) *ThesisUpdate {
	tu.mutation.SetDrawback(s)
	return tu
}

// SetNillableDrawback sets the "drawback" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableDrawback(s *string) *ThesisUpdate {
	if s != nil {
		tu.SetDrawback(*s)
	}
	return tu
}

// SetCreateTime sets the "create_time" field.
func (tu *ThesisUpdate) SetCreateTime(t time.Time) *ThesisUpdate {
	tu.mutation.SetCreateTime(t)
	return tu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tu *ThesisUpdate) SetNillableCreateTime(t *time.Time) *ThesisUpdate {
	if t != nil {
		tu.SetCreateTime(*t)
	}
	return tu
}

// SetUploadersID sets the "uploaders" edge to the User entity by ID.
func (tu *ThesisUpdate) SetUploadersID(id int) *ThesisUpdate {
	tu.mutation.SetUploadersID(id)
	return tu
}

// SetNillableUploadersID sets the "uploaders" edge to the User entity by ID if the given value is not nil.
func (tu *ThesisUpdate) SetNillableUploadersID(id *int) *ThesisUpdate {
	if id != nil {
		tu = tu.SetUploadersID(*id)
	}
	return tu
}

// SetUploaders sets the "uploaders" edge to the User entity.
func (tu *ThesisUpdate) SetUploaders(u *User) *ThesisUpdate {
	return tu.SetUploadersID(u.ID)
}

// SetExamineID sets the "examine" edge to the User entity by ID.
func (tu *ThesisUpdate) SetExamineID(id int) *ThesisUpdate {
	tu.mutation.SetExamineID(id)
	return tu
}

// SetNillableExamineID sets the "examine" edge to the User entity by ID if the given value is not nil.
func (tu *ThesisUpdate) SetNillableExamineID(id *int) *ThesisUpdate {
	if id != nil {
		tu = tu.SetExamineID(*id)
	}
	return tu
}

// SetExamine sets the "examine" edge to the User entity.
func (tu *ThesisUpdate) SetExamine(u *User) *ThesisUpdate {
	return tu.SetExamineID(u.ID)
}

// Mutation returns the ThesisMutation object of the builder.
func (tu *ThesisUpdate) Mutation() *ThesisMutation {
	return tu.mutation
}

// ClearUploaders clears the "uploaders" edge to the User entity.
func (tu *ThesisUpdate) ClearUploaders() *ThesisUpdate {
	tu.mutation.ClearUploaders()
	return tu
}

// ClearExamine clears the "examine" edge to the User entity.
func (tu *ThesisUpdate) ClearExamine() *ThesisUpdate {
	tu.mutation.ClearExamine()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ThesisUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ThesisUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ThesisUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ThesisUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *ThesisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(thesis.Table, thesis.Columns, sqlgraph.NewFieldSpec(thesis.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FileName(); ok {
		_spec.SetField(thesis.FieldFileName, field.TypeString, value)
	}
	if tu.mutation.FileNameCleared() {
		_spec.ClearField(thesis.FieldFileName, field.TypeString)
	}
	if value, ok := tu.mutation.FileURL(); ok {
		_spec.SetField(thesis.FieldFileURL, field.TypeString, value)
	}
	if tu.mutation.FileURLCleared() {
		_spec.ClearField(thesis.FieldFileURL, field.TypeString)
	}
	if value, ok := tu.mutation.FileState(); ok {
		_spec.SetField(thesis.FieldFileState, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedFileState(); ok {
		_spec.AddField(thesis.FieldFileState, field.TypeInt, value)
	}
	if value, ok := tu.mutation.UploadTime(); ok {
		_spec.SetField(thesis.FieldUploadTime, field.TypeTime, value)
	}
	if tu.mutation.UploadTimeCleared() {
		_spec.ClearField(thesis.FieldUploadTime, field.TypeTime)
	}
	if value, ok := tu.mutation.ChineseTitle(); ok {
		_spec.SetField(thesis.FieldChineseTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.EnglishTitle(); ok {
		_spec.SetField(thesis.FieldEnglishTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Authors(); ok {
		_spec.SetField(thesis.FieldAuthors, field.TypeString, value)
	}
	if value, ok := tu.mutation.Teachers(); ok {
		_spec.SetField(thesis.FieldTeachers, field.TypeString, value)
	}
	if value, ok := tu.mutation.FirstAdvance(); ok {
		_spec.SetField(thesis.FieldFirstAdvance, field.TypeString, value)
	}
	if value, ok := tu.mutation.SecondAdvance(); ok {
		_spec.SetField(thesis.FieldSecondAdvance, field.TypeString, value)
	}
	if value, ok := tu.mutation.ThirdAdvance(); ok {
		_spec.SetField(thesis.FieldThirdAdvance, field.TypeString, value)
	}
	if value, ok := tu.mutation.Drawback(); ok {
		_spec.SetField(thesis.FieldDrawback, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreateTime(); ok {
		_spec.SetField(thesis.FieldCreateTime, field.TypeTime, value)
	}
	if tu.mutation.UploadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thesis.UploadersTable,
			Columns: []string{thesis.UploadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UploadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thesis.UploadersTable,
			Columns: []string{thesis.UploadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ExamineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   thesis.ExamineTable,
			Columns: []string{thesis.ExamineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExamineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   thesis.ExamineTable,
			Columns: []string{thesis.ExamineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thesis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ThesisUpdateOne is the builder for updating a single Thesis entity.
type ThesisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThesisMutation
}

// SetFileName sets the "file_name" field.
func (tuo *ThesisUpdateOne) SetFileName(s string) *ThesisUpdateOne {
	tuo.mutation.SetFileName(s)
	return tuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableFileName(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetFileName(*s)
	}
	return tuo
}

// ClearFileName clears the value of the "file_name" field.
func (tuo *ThesisUpdateOne) ClearFileName() *ThesisUpdateOne {
	tuo.mutation.ClearFileName()
	return tuo
}

// SetFileURL sets the "file_url" field.
func (tuo *ThesisUpdateOne) SetFileURL(s string) *ThesisUpdateOne {
	tuo.mutation.SetFileURL(s)
	return tuo
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableFileURL(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetFileURL(*s)
	}
	return tuo
}

// ClearFileURL clears the value of the "file_url" field.
func (tuo *ThesisUpdateOne) ClearFileURL() *ThesisUpdateOne {
	tuo.mutation.ClearFileURL()
	return tuo
}

// SetFileState sets the "file_state" field.
func (tuo *ThesisUpdateOne) SetFileState(i int) *ThesisUpdateOne {
	tuo.mutation.ResetFileState()
	tuo.mutation.SetFileState(i)
	return tuo
}

// SetNillableFileState sets the "file_state" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableFileState(i *int) *ThesisUpdateOne {
	if i != nil {
		tuo.SetFileState(*i)
	}
	return tuo
}

// AddFileState adds i to the "file_state" field.
func (tuo *ThesisUpdateOne) AddFileState(i int) *ThesisUpdateOne {
	tuo.mutation.AddFileState(i)
	return tuo
}

// SetUploadTime sets the "upload_time" field.
func (tuo *ThesisUpdateOne) SetUploadTime(t time.Time) *ThesisUpdateOne {
	tuo.mutation.SetUploadTime(t)
	return tuo
}

// SetNillableUploadTime sets the "upload_time" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableUploadTime(t *time.Time) *ThesisUpdateOne {
	if t != nil {
		tuo.SetUploadTime(*t)
	}
	return tuo
}

// ClearUploadTime clears the value of the "upload_time" field.
func (tuo *ThesisUpdateOne) ClearUploadTime() *ThesisUpdateOne {
	tuo.mutation.ClearUploadTime()
	return tuo
}

// SetChineseTitle sets the "chinese_title" field.
func (tuo *ThesisUpdateOne) SetChineseTitle(s string) *ThesisUpdateOne {
	tuo.mutation.SetChineseTitle(s)
	return tuo
}

// SetNillableChineseTitle sets the "chinese_title" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableChineseTitle(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetChineseTitle(*s)
	}
	return tuo
}

// SetEnglishTitle sets the "english_title" field.
func (tuo *ThesisUpdateOne) SetEnglishTitle(s string) *ThesisUpdateOne {
	tuo.mutation.SetEnglishTitle(s)
	return tuo
}

// SetNillableEnglishTitle sets the "english_title" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableEnglishTitle(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetEnglishTitle(*s)
	}
	return tuo
}

// SetAuthors sets the "authors" field.
func (tuo *ThesisUpdateOne) SetAuthors(s string) *ThesisUpdateOne {
	tuo.mutation.SetAuthors(s)
	return tuo
}

// SetNillableAuthors sets the "authors" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableAuthors(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetAuthors(*s)
	}
	return tuo
}

// SetTeachers sets the "teachers" field.
func (tuo *ThesisUpdateOne) SetTeachers(s string) *ThesisUpdateOne {
	tuo.mutation.SetTeachers(s)
	return tuo
}

// SetNillableTeachers sets the "teachers" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableTeachers(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetTeachers(*s)
	}
	return tuo
}

// SetFirstAdvance sets the "first_advance" field.
func (tuo *ThesisUpdateOne) SetFirstAdvance(s string) *ThesisUpdateOne {
	tuo.mutation.SetFirstAdvance(s)
	return tuo
}

// SetNillableFirstAdvance sets the "first_advance" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableFirstAdvance(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetFirstAdvance(*s)
	}
	return tuo
}

// SetSecondAdvance sets the "second_advance" field.
func (tuo *ThesisUpdateOne) SetSecondAdvance(s string) *ThesisUpdateOne {
	tuo.mutation.SetSecondAdvance(s)
	return tuo
}

// SetNillableSecondAdvance sets the "second_advance" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableSecondAdvance(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetSecondAdvance(*s)
	}
	return tuo
}

// SetThirdAdvance sets the "third_advance" field.
func (tuo *ThesisUpdateOne) SetThirdAdvance(s string) *ThesisUpdateOne {
	tuo.mutation.SetThirdAdvance(s)
	return tuo
}

// SetNillableThirdAdvance sets the "third_advance" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableThirdAdvance(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetThirdAdvance(*s)
	}
	return tuo
}

// SetDrawback sets the "drawback" field.
func (tuo *ThesisUpdateOne) SetDrawback(s string) *ThesisUpdateOne {
	tuo.mutation.SetDrawback(s)
	return tuo
}

// SetNillableDrawback sets the "drawback" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableDrawback(s *string) *ThesisUpdateOne {
	if s != nil {
		tuo.SetDrawback(*s)
	}
	return tuo
}

// SetCreateTime sets the "create_time" field.
func (tuo *ThesisUpdateOne) SetCreateTime(t time.Time) *ThesisUpdateOne {
	tuo.mutation.SetCreateTime(t)
	return tuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableCreateTime(t *time.Time) *ThesisUpdateOne {
	if t != nil {
		tuo.SetCreateTime(*t)
	}
	return tuo
}

// SetUploadersID sets the "uploaders" edge to the User entity by ID.
func (tuo *ThesisUpdateOne) SetUploadersID(id int) *ThesisUpdateOne {
	tuo.mutation.SetUploadersID(id)
	return tuo
}

// SetNillableUploadersID sets the "uploaders" edge to the User entity by ID if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableUploadersID(id *int) *ThesisUpdateOne {
	if id != nil {
		tuo = tuo.SetUploadersID(*id)
	}
	return tuo
}

// SetUploaders sets the "uploaders" edge to the User entity.
func (tuo *ThesisUpdateOne) SetUploaders(u *User) *ThesisUpdateOne {
	return tuo.SetUploadersID(u.ID)
}

// SetExamineID sets the "examine" edge to the User entity by ID.
func (tuo *ThesisUpdateOne) SetExamineID(id int) *ThesisUpdateOne {
	tuo.mutation.SetExamineID(id)
	return tuo
}

// SetNillableExamineID sets the "examine" edge to the User entity by ID if the given value is not nil.
func (tuo *ThesisUpdateOne) SetNillableExamineID(id *int) *ThesisUpdateOne {
	if id != nil {
		tuo = tuo.SetExamineID(*id)
	}
	return tuo
}

// SetExamine sets the "examine" edge to the User entity.
func (tuo *ThesisUpdateOne) SetExamine(u *User) *ThesisUpdateOne {
	return tuo.SetExamineID(u.ID)
}

// Mutation returns the ThesisMutation object of the builder.
func (tuo *ThesisUpdateOne) Mutation() *ThesisMutation {
	return tuo.mutation
}

// ClearUploaders clears the "uploaders" edge to the User entity.
func (tuo *ThesisUpdateOne) ClearUploaders() *ThesisUpdateOne {
	tuo.mutation.ClearUploaders()
	return tuo
}

// ClearExamine clears the "examine" edge to the User entity.
func (tuo *ThesisUpdateOne) ClearExamine() *ThesisUpdateOne {
	tuo.mutation.ClearExamine()
	return tuo
}

// Where appends a list predicates to the ThesisUpdate builder.
func (tuo *ThesisUpdateOne) Where(ps ...predicate.Thesis) *ThesisUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ThesisUpdateOne) Select(field string, fields ...string) *ThesisUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Thesis entity.
func (tuo *ThesisUpdateOne) Save(ctx context.Context) (*Thesis, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ThesisUpdateOne) SaveX(ctx context.Context) *Thesis {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ThesisUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ThesisUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *ThesisUpdateOne) sqlSave(ctx context.Context) (_node *Thesis, err error) {
	_spec := sqlgraph.NewUpdateSpec(thesis.Table, thesis.Columns, sqlgraph.NewFieldSpec(thesis.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Thesis.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thesis.FieldID)
		for _, f := range fields {
			if !thesis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thesis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FileName(); ok {
		_spec.SetField(thesis.FieldFileName, field.TypeString, value)
	}
	if tuo.mutation.FileNameCleared() {
		_spec.ClearField(thesis.FieldFileName, field.TypeString)
	}
	if value, ok := tuo.mutation.FileURL(); ok {
		_spec.SetField(thesis.FieldFileURL, field.TypeString, value)
	}
	if tuo.mutation.FileURLCleared() {
		_spec.ClearField(thesis.FieldFileURL, field.TypeString)
	}
	if value, ok := tuo.mutation.FileState(); ok {
		_spec.SetField(thesis.FieldFileState, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedFileState(); ok {
		_spec.AddField(thesis.FieldFileState, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.UploadTime(); ok {
		_spec.SetField(thesis.FieldUploadTime, field.TypeTime, value)
	}
	if tuo.mutation.UploadTimeCleared() {
		_spec.ClearField(thesis.FieldUploadTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.ChineseTitle(); ok {
		_spec.SetField(thesis.FieldChineseTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.EnglishTitle(); ok {
		_spec.SetField(thesis.FieldEnglishTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Authors(); ok {
		_spec.SetField(thesis.FieldAuthors, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Teachers(); ok {
		_spec.SetField(thesis.FieldTeachers, field.TypeString, value)
	}
	if value, ok := tuo.mutation.FirstAdvance(); ok {
		_spec.SetField(thesis.FieldFirstAdvance, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SecondAdvance(); ok {
		_spec.SetField(thesis.FieldSecondAdvance, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ThirdAdvance(); ok {
		_spec.SetField(thesis.FieldThirdAdvance, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Drawback(); ok {
		_spec.SetField(thesis.FieldDrawback, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreateTime(); ok {
		_spec.SetField(thesis.FieldCreateTime, field.TypeTime, value)
	}
	if tuo.mutation.UploadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thesis.UploadersTable,
			Columns: []string{thesis.UploadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UploadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thesis.UploadersTable,
			Columns: []string{thesis.UploadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ExamineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   thesis.ExamineTable,
			Columns: []string{thesis.ExamineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExamineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   thesis.ExamineTable,
			Columns: []string{thesis.ExamineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Thesis{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thesis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

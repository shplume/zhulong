// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ZEQUANR/zhulong/ent/administrators"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// AdministratorsCreate is the builder for creating a Administrators entity.
type AdministratorsCreate struct {
	config
	mutation *AdministratorsMutation
	hooks    []Hook
}

// SetAvatar sets the "avatar" field.
func (ac *AdministratorsCreate) SetAvatar(s string) *AdministratorsCreate {
	ac.mutation.SetAvatar(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AdministratorsCreate) SetName(s string) *AdministratorsCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetCollege sets the "college" field.
func (ac *AdministratorsCreate) SetCollege(s string) *AdministratorsCreate {
	ac.mutation.SetCollege(s)
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AdministratorsCreate) SetPhone(s string) *AdministratorsCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetNumber sets the "number" field.
func (ac *AdministratorsCreate) SetNumber(s string) *AdministratorsCreate {
	ac.mutation.SetNumber(s)
	return ac
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ac *AdministratorsCreate) SetUsersID(id int) *AdministratorsCreate {
	ac.mutation.SetUsersID(id)
	return ac
}

// SetUsers sets the "users" edge to the User entity.
func (ac *AdministratorsCreate) SetUsers(u *User) *AdministratorsCreate {
	return ac.SetUsersID(u.ID)
}

// Mutation returns the AdministratorsMutation object of the builder.
func (ac *AdministratorsCreate) Mutation() *AdministratorsMutation {
	return ac.mutation
}

// Save creates the Administrators in the database.
func (ac *AdministratorsCreate) Save(ctx context.Context) (*Administrators, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdministratorsCreate) SaveX(ctx context.Context) *Administrators {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdministratorsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdministratorsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdministratorsCreate) check() error {
	if _, ok := ac.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Administrators.avatar"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Administrators.name"`)}
	}
	if _, ok := ac.mutation.College(); !ok {
		return &ValidationError{Name: "college", err: errors.New(`ent: missing required field "Administrators.college"`)}
	}
	if _, ok := ac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Administrators.phone"`)}
	}
	if _, ok := ac.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Administrators.number"`)}
	}
	if _, ok := ac.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Administrators.users"`)}
	}
	return nil
}

func (ac *AdministratorsCreate) sqlSave(ctx context.Context) (*Administrators, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AdministratorsCreate) createSpec() (*Administrators, *sqlgraph.CreateSpec) {
	var (
		_node = &Administrators{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(administrators.Table, sqlgraph.NewFieldSpec(administrators.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Avatar(); ok {
		_spec.SetField(administrators.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(administrators.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.College(); ok {
		_spec.SetField(administrators.FieldCollege, field.TypeString, value)
		_node.College = value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.SetField(administrators.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ac.mutation.Number(); ok {
		_spec.SetField(administrators.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if nodes := ac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   administrators.UsersTable,
			Columns: []string{administrators.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_administrators = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdministratorsCreateBulk is the builder for creating many Administrators entities in bulk.
type AdministratorsCreateBulk struct {
	config
	err      error
	builders []*AdministratorsCreate
}

// Save creates the Administrators entities in the database.
func (acb *AdministratorsCreateBulk) Save(ctx context.Context) ([]*Administrators, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Administrators, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdministratorsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdministratorsCreateBulk) SaveX(ctx context.Context) []*Administrators {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdministratorsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdministratorsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

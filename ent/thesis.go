// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ZEQUANR/zhulong/ent/thesis"
	"github.com/ZEQUANR/zhulong/ent/user"
)

// Thesis is the model entity for the Thesis schema.
type Thesis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// FileState holds the value of the "file_state" field.
	FileState int `json:"file_state,omitempty"`
	// UploadTime holds the value of the "upload_time" field.
	UploadTime time.Time `json:"upload_time,omitempty"`
	// ChineseTitle holds the value of the "chinese_title" field.
	ChineseTitle string `json:"chinese_title,omitempty"`
	// EnglishTitle holds the value of the "english_title" field.
	EnglishTitle string `json:"english_title,omitempty"`
	// Authors holds the value of the "authors" field.
	Authors string `json:"authors,omitempty"`
	// Teachers holds the value of the "teachers" field.
	Teachers string `json:"teachers,omitempty"`
	// FirstAdvance holds the value of the "first_advance" field.
	FirstAdvance string `json:"first_advance,omitempty"`
	// SecondAdvance holds the value of the "second_advance" field.
	SecondAdvance string `json:"second_advance,omitempty"`
	// ThirdAdvance holds the value of the "third_advance" field.
	ThirdAdvance string `json:"third_advance,omitempty"`
	// Drawback holds the value of the "drawback" field.
	Drawback string `json:"drawback,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThesisQuery when eager-loading is set.
	Edges          ThesisEdges `json:"edges"`
	thesis_examine *int
	user_thesis    *int
	selectValues   sql.SelectValues
}

// ThesisEdges holds the relations/edges for other nodes in the graph.
type ThesisEdges struct {
	// Uploaders holds the value of the uploaders edge.
	Uploaders *User `json:"uploaders,omitempty"`
	// Examine holds the value of the examine edge.
	Examine *User `json:"examine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UploadersOrErr returns the Uploaders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThesisEdges) UploadersOrErr() (*User, error) {
	if e.Uploaders != nil {
		return e.Uploaders, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploaders"}
}

// ExamineOrErr returns the Examine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThesisEdges) ExamineOrErr() (*User, error) {
	if e.Examine != nil {
		return e.Examine, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "examine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thesis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thesis.FieldID, thesis.FieldFileState:
			values[i] = new(sql.NullInt64)
		case thesis.FieldFileName, thesis.FieldFileURL, thesis.FieldChineseTitle, thesis.FieldEnglishTitle, thesis.FieldAuthors, thesis.FieldTeachers, thesis.FieldFirstAdvance, thesis.FieldSecondAdvance, thesis.FieldThirdAdvance, thesis.FieldDrawback:
			values[i] = new(sql.NullString)
		case thesis.FieldUploadTime, thesis.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case thesis.ForeignKeys[0]: // thesis_examine
			values[i] = new(sql.NullInt64)
		case thesis.ForeignKeys[1]: // user_thesis
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thesis fields.
func (t *Thesis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thesis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thesis.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				t.FileName = value.String
			}
		case thesis.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				t.FileURL = value.String
			}
		case thesis.FieldFileState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_state", values[i])
			} else if value.Valid {
				t.FileState = int(value.Int64)
			}
		case thesis.FieldUploadTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field upload_time", values[i])
			} else if value.Valid {
				t.UploadTime = value.Time
			}
		case thesis.FieldChineseTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chinese_title", values[i])
			} else if value.Valid {
				t.ChineseTitle = value.String
			}
		case thesis.FieldEnglishTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english_title", values[i])
			} else if value.Valid {
				t.EnglishTitle = value.String
			}
		case thesis.FieldAuthors:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authors", values[i])
			} else if value.Valid {
				t.Authors = value.String
			}
		case thesis.FieldTeachers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teachers", values[i])
			} else if value.Valid {
				t.Teachers = value.String
			}
		case thesis.FieldFirstAdvance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_advance", values[i])
			} else if value.Valid {
				t.FirstAdvance = value.String
			}
		case thesis.FieldSecondAdvance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field second_advance", values[i])
			} else if value.Valid {
				t.SecondAdvance = value.String
			}
		case thesis.FieldThirdAdvance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_advance", values[i])
			} else if value.Valid {
				t.ThirdAdvance = value.String
			}
		case thesis.FieldDrawback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field drawback", values[i])
			} else if value.Valid {
				t.Drawback = value.String
			}
		case thesis.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case thesis.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field thesis_examine", value)
			} else if value.Valid {
				t.thesis_examine = new(int)
				*t.thesis_examine = int(value.Int64)
			}
		case thesis.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_thesis", value)
			} else if value.Valid {
				t.user_thesis = new(int)
				*t.user_thesis = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Thesis.
// This includes values selected through modifiers, order, etc.
func (t *Thesis) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUploaders queries the "uploaders" edge of the Thesis entity.
func (t *Thesis) QueryUploaders() *UserQuery {
	return NewThesisClient(t.config).QueryUploaders(t)
}

// QueryExamine queries the "examine" edge of the Thesis entity.
func (t *Thesis) QueryExamine() *UserQuery {
	return NewThesisClient(t.config).QueryExamine(t)
}

// Update returns a builder for updating this Thesis.
// Note that you need to call Thesis.Unwrap() before calling this method if this Thesis
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thesis) Update() *ThesisUpdateOne {
	return NewThesisClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Thesis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thesis) Unwrap() *Thesis {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thesis is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thesis) String() string {
	var builder strings.Builder
	builder.WriteString("Thesis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("file_name=")
	builder.WriteString(t.FileName)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(t.FileURL)
	builder.WriteString(", ")
	builder.WriteString("file_state=")
	builder.WriteString(fmt.Sprintf("%v", t.FileState))
	builder.WriteString(", ")
	builder.WriteString("upload_time=")
	builder.WriteString(t.UploadTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chinese_title=")
	builder.WriteString(t.ChineseTitle)
	builder.WriteString(", ")
	builder.WriteString("english_title=")
	builder.WriteString(t.EnglishTitle)
	builder.WriteString(", ")
	builder.WriteString("authors=")
	builder.WriteString(t.Authors)
	builder.WriteString(", ")
	builder.WriteString("teachers=")
	builder.WriteString(t.Teachers)
	builder.WriteString(", ")
	builder.WriteString("first_advance=")
	builder.WriteString(t.FirstAdvance)
	builder.WriteString(", ")
	builder.WriteString("second_advance=")
	builder.WriteString(t.SecondAdvance)
	builder.WriteString(", ")
	builder.WriteString("third_advance=")
	builder.WriteString(t.ThirdAdvance)
	builder.WriteString(", ")
	builder.WriteString("drawback=")
	builder.WriteString(t.Drawback)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Theses is a parsable slice of Thesis.
type Theses []*Thesis

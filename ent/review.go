// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shplume/zhulong/ent/file"
	"github.com/shplume/zhulong/ent/review"
	"github.com/shplume/zhulong/ent/student"
	"github.com/shplume/zhulong/ent/teacher"
)

// Review is the model entity for the Review schema.
type Review struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark *string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewQuery when eager-loading is set.
	Edges             ReviewEdges `json:"edges"`
	review_thesis     *int
	review_student_id *int
	review_teacher_id *int
	review_book_id    *int
	selectValues      sql.SelectValues
}

// ReviewEdges holds the relations/edges for other nodes in the graph.
type ReviewEdges struct {
	// Thesis holds the value of the thesis edge.
	Thesis *File `json:"thesis,omitempty"`
	// StudentID holds the value of the student_id edge.
	StudentID *Student `json:"student_id,omitempty"`
	// TeacherID holds the value of the teacher_id edge.
	TeacherID *Teacher `json:"teacher_id,omitempty"`
	// BookID holds the value of the book_id edge.
	BookID *File `json:"book_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ThesisOrErr returns the Thesis value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) ThesisOrErr() (*File, error) {
	if e.Thesis != nil {
		return e.Thesis, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "thesis"}
}

// StudentIDOrErr returns the StudentID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) StudentIDOrErr() (*Student, error) {
	if e.StudentID != nil {
		return e.StudentID, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: student.Label}
	}
	return nil, &NotLoadedError{edge: "student_id"}
}

// TeacherIDOrErr returns the TeacherID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) TeacherIDOrErr() (*Teacher, error) {
	if e.TeacherID != nil {
		return e.TeacherID, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: teacher.Label}
	}
	return nil, &NotLoadedError{edge: "teacher_id"}
}

// BookIDOrErr returns the BookID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) BookIDOrErr() (*File, error) {
	if e.BookID != nil {
		return e.BookID, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "book_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Review) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case review.FieldID, review.FieldStatus:
			values[i] = new(sql.NullInt64)
		case review.FieldRemark:
			values[i] = new(sql.NullString)
		case review.ForeignKeys[0]: // review_thesis
			values[i] = new(sql.NullInt64)
		case review.ForeignKeys[1]: // review_student_id
			values[i] = new(sql.NullInt64)
		case review.ForeignKeys[2]: // review_teacher_id
			values[i] = new(sql.NullInt64)
		case review.ForeignKeys[3]: // review_book_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Review fields.
func (r *Review) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case review.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case review.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = int(value.Int64)
			}
		case review.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				r.Remark = new(string)
				*r.Remark = value.String
			}
		case review.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field review_thesis", value)
			} else if value.Valid {
				r.review_thesis = new(int)
				*r.review_thesis = int(value.Int64)
			}
		case review.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field review_student_id", value)
			} else if value.Valid {
				r.review_student_id = new(int)
				*r.review_student_id = int(value.Int64)
			}
		case review.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field review_teacher_id", value)
			} else if value.Valid {
				r.review_teacher_id = new(int)
				*r.review_teacher_id = int(value.Int64)
			}
		case review.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field review_book_id", value)
			} else if value.Valid {
				r.review_book_id = new(int)
				*r.review_book_id = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Review.
// This includes values selected through modifiers, order, etc.
func (r *Review) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryThesis queries the "thesis" edge of the Review entity.
func (r *Review) QueryThesis() *FileQuery {
	return NewReviewClient(r.config).QueryThesis(r)
}

// QueryStudentID queries the "student_id" edge of the Review entity.
func (r *Review) QueryStudentID() *StudentQuery {
	return NewReviewClient(r.config).QueryStudentID(r)
}

// QueryTeacherID queries the "teacher_id" edge of the Review entity.
func (r *Review) QueryTeacherID() *TeacherQuery {
	return NewReviewClient(r.config).QueryTeacherID(r)
}

// QueryBookID queries the "book_id" edge of the Review entity.
func (r *Review) QueryBookID() *FileQuery {
	return NewReviewClient(r.config).QueryBookID(r)
}

// Update returns a builder for updating this Review.
// Note that you need to call Review.Unwrap() before calling this method if this Review
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Review) Update() *ReviewUpdateOne {
	return NewReviewClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Review entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Review) Unwrap() *Review {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Review is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Review) String() string {
	var builder strings.Builder
	builder.WriteString("Review(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	if v := r.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Reviews is a parsable slice of Review.
type Reviews []*Review
